/**
 * ملف تنفيذ تكامل نظام ملف المستخدم المحسّن الجديد
 * يقوم بإضافة التكامل بين نظام الاستثمار ونظام ملف المستخدم المحسن مع الصلاحيات الجديدة
 */

// تنفيذ التكامل
document.addEventListener('DOMContentLoaded', function() {
    console.log('بدء تنفيذ تكامل نظام ملف المستخدم المحسن الجديد...');
    
    // إضافة الأنماط
    addEnhancedProfileStyles();
    
    // إضافة الوظائف إلى الشريط الجانبي
    enhanceSidebar();
    
    // تعديل مصادقة النظام لدعم الصلاحيات
    enhanceAuthSystem();
    
    // تهيئة نظام ملف المستخدم المحسن إذا كان موجوداً
    if (window.EnhancedUserProfile && typeof window.EnhancedUserProfile.init === 'function') {
        window.EnhancedUserProfile.init();
    } else {
        console.warn('نظام ملف المستخدم المحسن غير موجود. يرجى التأكد من تضمين ملف user-profile-enhanced.js');
        
        // مؤقتاً، نقوم بإنشاء عناصر واجهة المستخدم الأساسية
        createBasicUserProfileElements();
    }
    
    console.log('تم تنفيذ تكامل نظام ملف المستخدم المحسن الجديد بنجاح');
});

/**
 * إضافة أنماط CSS لنظام ملف المستخدم المحسن
 */
function addEnhancedProfileStyles() {
    // التحقق من وجود الأنماط مسبقاً
    if (document.getElementById('enhanced-profile-styles-inline')) {
        return;
    }
    
    // إنشاء عنصر النمط
    const styleElement = document.createElement('style');
    styleElement.id = 'enhanced-profile-styles-inline';
    
    // إضافة متغيرات CSS الأساسية
    styleElement.textContent = `
    :root {
        --primary-color: #3b82f6;
        --primary-color-dark: #2563eb;
        --primary-color-light: #93c5fd;
        --success-color: #10b981;
        --danger-color: #ef4444;
        --warning-color: #f59e0b;
        --info-color: #64748b;
        --bg-color: #f9fafb;
        --text-color: #1f2937;
        --text-color-light: #6b7280;
        --border-color: #e5e7eb;
    }
    
    /* أنماط أساسية لواجهة المستخدم المحسنة */
    .user-menu-container {
        position: relative;
        display: flex;
        align-items: center;
        margin-right: 1rem;
    }
    
    .user-info {
        display: flex;
        align-items: center;
        position: relative;
    }
    
    .dropdown {
        position: relative;
        display: inline-block;
    }
    
    .dropdown-toggle {
        display: flex;
        align-items: center;
        background: none;
        border: none;
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
        cursor: pointer;
        color: var(--text-color);
        transition: background-color 0.3s ease;
    }
    
    .dropdown-toggle:hover {
        background-color: rgba(0, 0, 0, 0.05);
    }
    
    .user-avatar {
        width: 2.25rem;
        height: 2.25rem;
        border-radius: 50%;
        background-color: var(--primary-color);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        margin-left: 0.5rem;
        font-size: 1rem;
    }
    `;
    
    // إضافة عنصر النمط إلى الصفحة
    document.head.appendChild(styleElement);
    
    // إضافة ملف CSS الخارجي إذا لم يكن موجوداً
    if (!document.querySelector('link[href="user-profile-enhanced-styles.css"]')) {
        const linkElement = document.createElement('link');
        linkElement.rel = 'stylesheet';
        linkElement.href = 'user-profile-enhanced-styles.css';
        document.head.appendChild(linkElement);
    }
    
    console.log('تم إضافة أنماط CSS لنظام ملف المستخدم المحسن');
}

/**
 * تحسين الشريط الجانبي بإضافة عناصر إدارة المستخدمين
 */
function enhanceSidebar() {
    const sidebarNav = document.querySelector('.sidebar .nav-list');
    if (!sidebarNav) {
        console.warn('لم يتم العثور على قائمة الشريط الجانبي');
        return;
    }
    
    // إضافة عنصر إدارة المستخدمين قبل الإعدادات
    const settingsItem = sidebarNav.querySelector('.nav-item [data-page="settings"]').closest('.nav-item');
    
    // إنشاء عنصر إدارة المستخدمين
    const userManagementItem = document.createElement('li');
    userManagementItem.className = 'nav-item user-management admin-only';
    userManagementItem.setAttribute('data-permission', 'canCreateUsers');
    userManagementItem.innerHTML = `
        <a class="nav-link" data-page="user-management" href="#">
            <div class="nav-icon">
                <i class="fas fa-user-shield"></i>
            </div>
            <span>إدارة المستخدمين</span>
        </a>
    `;
    
    // إضافة العنصر قبل الإعدادات
    if (settingsItem) {
        sidebarNav.insertBefore(userManagementItem, settingsItem);
    } else {
        sidebarNav.appendChild(userManagementItem);
    }
    
    // إضافة مستمع حدث للتنقل
    userManagementItem.querySelector('.nav-link').addEventListener('click', function(e) {
        e.preventDefault();
        navigateToPage('user-management');
    });
    
    console.log('تم تحسين الشريط الجانبي بإضافة عناصر إدارة المستخدمين');
}

/**
 * تعديل نظام المصادقة لدعم الصلاحيات
 */
function enhanceAuthSystem() {
    // إضافة خاصية الصلاحيات إلى كائن المستخدم الحالي
    if (window.AuthSystem && typeof window.AuthSystem.getUserInfo === 'function') {
        const originalGetUserInfo = window.AuthSystem.getUserInfo;
        
        // استبدال الدالة بنسخة محسنة
        window.AuthSystem.getUserInfo = function() {
            const userInfo = originalGetUserInfo.call(window.AuthSystem);
            
            // إضافة نوع المستخدم والصلاحيات إذا لم تكن موجودة
            if (userInfo) {
                if (!userInfo.type) {
                    // تحديد نوع افتراضي حسب البريد الإلكتروني
                    if (userInfo.email && userInfo.email.includes('admin')) {
                        userInfo.type = 'admin';
                    } else if (userInfo.email && userInfo.email.includes('manager')) {
                        userInfo.type = 'manager';
                    } else {
                        userInfo.type = 'user';
                    }
                }
                
                // إضافة الصلاحيات الافتراضية إذا لم تكن موجودة
                if (!userInfo.permissions) {
                    userInfo.permissions = getDefaultPermissions(userInfo.type);
                }
            }
            
            return userInfo;
        };
        
        console.log('تم تحسين نظام المصادقة لدعم الصلاحيات');
    } else {
        console.warn('نظام المصادقة غير موجود أو لا يوفر وظيفة الحصول على معلومات المستخدم');
    }
}

/**
 * الحصول على الصلاحيات الافتراضية حسب نوع المستخدم
 * @param {string} userType - نوع المستخدم
 * @returns {Object} - كائن الصلاحيات
 */
function getDefaultPermissions(userType) {
    switch (userType) {
        case 'admin':
            return {
                canCreateUsers: true,
                canDeleteUsers: true,
                canManageSettings: true,
                canDeleteInvestors: true,
                canExportData: true,
                canImportData: true,
                canCreateBackup: true,
                canRestoreBackup: true
            };
        case 'manager':
            return {
                canCreateUsers: true,
                canDeleteUsers: false,
                canManageSettings: true,
                canDeleteInvestors: true,
                canExportData: true,
                canImportData: true,
                canCreateBackup: false,
                canRestoreBackup: false
            };
        case 'user':
        default:
            return {
                canCreateUsers: false,
                canDeleteUsers: false,
                canManageSettings: false,
                canDeleteInvestors: false,
                canExportData: true,
                canImportData: false,
                canCreateBackup: false,
                canRestoreBackup: false
            };
    }
}

/**
 * إنشاء عناصر واجهة المستخدم الأساسية
 * (يستخدم مؤقتاً إذا لم يكن نظام ملف المستخدم المحسن موجوداً)
 */
function createBasicUserProfileElements() {
    // البحث عن حاوية قائمة المستخدم
    const headerActions = document.querySelector('.header-actions');
    if (!headerActions) {
        console.warn('لم يتم العثور على حاوية عناصر الرأس');
        return;
    }
    
    // إنشاء عنصر معلومات المستخدم
    const userInfo = document.createElement('div');
    userInfo.className = 'user-info dropdown';
    
    // الحصول على معلومات المستخدم الحالي
    let currentUser = null;
    if (window.AuthSystem && typeof window.AuthSystem.getUserInfo === 'function') {
        currentUser = window.AuthSystem.getUserInfo();
    }
    
    // تحديد محتوى العنصر
    if (currentUser) {
        // المستخدم مسجل الدخول
        userInfo.innerHTML = `
            <button class="dropdown-toggle">
                <span class="user-avatar">${(currentUser.displayName || currentUser.email).charAt(0)}</span>
                <span class="user-name">${currentUser.displayName || currentUser.email}</span>
                <span class="user-type">${getUserTypeLabel(currentUser.type)}</span>
                <i class="fas fa-chevron-down"></i>
            </button>
            <div class="dropdown-menu">
                <a href="#" class="dropdown-item" id="profile-btn">
                    <i class="fas fa-user"></i>
                    <span>الملف الشخصي</span>
                </a>
                <a href="#" class="dropdown-item" id="change-password-btn">
                    <i class="fas fa-key"></i>
                    <span>تغيير كلمة المرور</span>
                </a>
                <div class="dropdown-divider"></div>
                <a href="#" class="dropdown-item" id="logout-btn">
                    <i class="fas fa-sign-out-alt"></i>
                    <span>تسجيل الخروج</span>
                </a>
            </div>
        `;
    } else {
        // المستخدم غير مسجل الدخول
        userInfo.innerHTML = `
            <button class="btn btn-primary" id="login-header-btn">
                <i class="fas fa-sign-in-alt"></i>
                <span>تسجيل الدخول</span>
            </button>
        `;
    }
    
    // إضافة العنصر إلى الصفحة
    headerActions.appendChild(userInfo);
    
    // إضافة مستمعي الأحداث
    setupBasicUserMenuListeners(userInfo, currentUser);
    
    console.log('تم إنشاء عناصر واجهة المستخدم الأساسية');
}

/**
 * إضافة مستمعي الأحداث لعناصر قائمة المستخدم
 * @param {HTMLElement} userInfo - عنصر معلومات المستخدم
 * @param {Object} currentUser - كائن المستخدم الحالي
 */
function setupBasicUserMenuListeners(userInfo, currentUser) {
    if (!userInfo) return;
    
    // تبديل القائمة المنسدلة
    const dropdownToggle = userInfo.querySelector('.dropdown-toggle');
    if (dropdownToggle) {
        dropdownToggle.addEventListener('click', function(e) {
            e.preventDefault();
            userInfo.classList.toggle('active');
        });
        
        // إغلاق القائمة عند النقر خارجها
        document.addEventListener('click', function(e) {
            if (!userInfo.contains(e.target)) {
                userInfo.classList.remove('active');
            }
        });
    }
    
    // زر تسجيل الدخول
    const loginBtn = userInfo.querySelector('#login-header-btn');
    if (loginBtn) {
        loginBtn.addEventListener('click', function(e) {
            e.preventDefault();
            
            // فتح نافذة تسجيل الدخول
            if (window.AuthSystem && typeof window.AuthSystem.showAuthModal === 'function') {
                window.AuthSystem.showAuthModal();
            }
        });
    }
    
    // الملف الشخصي
    const profileBtn = userInfo.querySelector('#profile-btn');
    if (profileBtn) {
        profileBtn.addEventListener('click', function(e) {
            e.preventDefault();
            showBasicProfileModal(currentUser);
            userInfo.classList.remove('active');
        });
    }
    
    // تغيير كلمة المرور
    const changePasswordBtn = userInfo.querySelector('#change-password-btn');
    if (changePasswordBtn) {
        changePasswordBtn.addEventListener('click', function(e) {
            e.preventDefault();
            showBasicChangePasswordModal();
            userInfo.classList.remove('active');
        });
    }
    
    // تسجيل الخروج
    const logoutBtn = userInfo.querySelector('#logout-btn');
    if (logoutBtn) {
        logoutBtn.addEventListener('click', function(e) {
            e.preventDefault();
            
            // تأكيد تسجيل الخروج
            if (confirm('هل أنت متأكد من رغبتك في تسجيل الخروج؟')) {
                // تسجيل الخروج
                if (window.AuthSystem && typeof window.AuthSystem.logout === 'function') {
                    window.AuthSystem.logout()
                        .then(() => {
                            console.log('تم تسجيل الخروج بنجاح');
                            // إعادة تحميل الصفحة
                            window.location.reload();
                        })
                        .catch(error => {
                            console.error('خطأ في تسجيل الخروج:', error);
                            alert('حدث خطأ أثناء تسجيل الخروج');
                        });
                }
            }
            
            userInfo.classList.remove('active');
        });
    }
}

/**
 * عرض نافذة الملف الشخصي الأساسية
 * @param {Object} currentUser - كائن المستخدم الحالي
 */
function showBasicProfileModal(currentUser) {
    if (!currentUser) return;
    
    // التحقق من وجود النافذة
    let profileModal = document.getElementById('basic-profile-modal');
    
    if (!profileModal) {
        // إنشاء عنصر النافذة
        profileModal = document.createElement('div');
        profileModal.id = 'basic-profile-modal';
        profileModal.className = 'modal-overlay';
        
        profileModal.innerHTML = `
            <div class="modal">
                <div class="modal-header">
                    <h3 class="modal-title">الملف الشخصي</h3>
                    <button class="modal-close">&times;</button>
                </div>
               <div class="profile-avatar">
                        <div class="avatar-circle">
                            ${currentUser.displayName ? currentUser.displayName.charAt(0).toUpperCase() : 'U'}
                        </div>
                        <div class="profile-info">
                            <h3>${currentUser.displayName || 'المستخدم'}</h3>
                            <p class="user-type-badge ${currentUser.type}">${getUserTypeLabel(currentUser.type)}</p>
                        </div>
                    </div>
                    
                    <form id="profile-form">
                        <div class="form-group">
                            <label class="form-label">البريد الإلكتروني</label>
                            <input type="email" class="form-input" value="${currentUser.email}" readonly>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">الاسم الكامل</label>
                            <input type="text" class="form-input" id="profile-fullname" value="${currentUser.displayName || ''}">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-outline modal-close-btn">إلغاء</button>
                    <button class="btn btn-primary" id="save-profile-btn">حفظ التغييرات</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(profileModal);
        
        // إضافة مستمعي الأحداث
        setupBasicModalListeners(profileModal);
        
        // مستمع حدث لزر حفظ الملف الشخصي
        const saveProfileBtn = profileModal.querySelector('#save-profile-btn');
        if (saveProfileBtn) {
            saveProfileBtn.addEventListener('click', function() {
                const fullNameInput = document.getElementById('profile-fullname');
                
                if (!fullNameInput) {
                    alert('خطأ: حقل الاسم غير موجود');
                    return;
                }
                
                const fullName = fullNameInput.value.trim();
                
                if (!fullName) {
                    alert('يرجى إدخال الاسم الكامل');
                    return;
                }
                
                // تحديث اسم العرض
                if (window.firebase && firebase.auth().currentUser) {
                    firebase.auth().currentUser.updateProfile({
                        displayName: fullName
                    })
                    .then(() => {
                        alert('تم تحديث الملف الشخصي بنجاح');
                        profileModal.classList.remove('active');
                        
                        // تحديث واجهة المستخدم
                        if (currentUser) {
                            currentUser.displayName = fullName;
                            updateUserInfo();
                        }
                    })
                    .catch(error => {
                        console.error('خطأ في تحديث الملف الشخصي:', error);
                        alert('حدث خطأ أثناء تحديث الملف الشخصي');
                    });
                }
            });
        }
    }
    
    // إظهار النافذة
    profileModal.classList.add('active');
}

/**
 * عرض نافذة تغيير كلمة المرور الأساسية
 */
function showBasicChangePasswordModal() {
    // التحقق من وجود النافذة
    let passwordModal = document.getElementById('basic-change-password-modal');
    
    if (!passwordModal) {
        // إنشاء عنصر النافذة
        passwordModal = document.createElement('div');
        passwordModal.id = 'basic-change-password-modal';
        passwordModal.className = 'modal-overlay';
        
        passwordModal.innerHTML = `
            <div class="modal">
                <div class="modal-header">
                    <h3 class="modal-title">تغيير كلمة المرور</h3>
                    <button class="modal-close">&times;</button>
                </div>
                <div class="modal-body">
                    <form id="change-password-form">
                        <div class="form-group">
                            <label class="form-label">كلمة المرور الحالية</label>
                            <div class="password-input-container">
                                <input type="password" class="form-input" id="current-password" required>
                                <button type="button" class="toggle-password">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">كلمة المرور الجديدة</label>
                            <div class="password-input-container">
                                <input type="password" class="form-input" id="new-password" required>
                                <button type="button" class="toggle-password">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">تأكيد كلمة المرور الجديدة</label>
                            <div class="password-input-container">
                                <input type="password" class="form-input" id="confirm-new-password" required>
                                <button type="button" class="toggle-password">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-outline modal-close-btn">إلغاء</button>
                    <button class="btn btn-primary" id="save-password-btn">تغيير كلمة المرور</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(passwordModal);
        
        // إضافة مستمعي الأحداث
        setupBasicModalListeners(passwordModal);
        
        // مستمعي أحداث لأزرار إظهار/إخفاء كلمة المرور
        const togglePasswordButtons = passwordModal.querySelectorAll('.toggle-password');
        togglePasswordButtons.forEach(button => {
            button.addEventListener('click', function() {
                const passwordInput = this.parentElement.querySelector('input');
                if (passwordInput.type === 'password') {
                    passwordInput.type = 'text';
                    this.querySelector('i').classList.remove('fa-eye');
                    this.querySelector('i').classList.add('fa-eye-slash');
                } else {
                    passwordInput.type = 'password';
                    this.querySelector('i').classList.remove('fa-eye-slash');
                    this.querySelector('i').classList.add('fa-eye');
                }
            });
        });
        
        // مستمع حدث لزر حفظ كلمة المرور
        const savePasswordBtn = passwordModal.querySelector('#save-password-btn');
        if (savePasswordBtn) {
            savePasswordBtn.addEventListener('click', function() {
                const currentPasswordInput = document.getElementById('current-password');
                const newPasswordInput = document.getElementById('new-password');
                const confirmNewPasswordInput = document.getElementById('confirm-new-password');
                
                if (!currentPasswordInput || !newPasswordInput || !confirmNewPasswordInput) {
                    alert('خطأ في النموذج: بعض الحقول المطلوبة غير موجودة');
                    return;
                }
                
                const currentPassword = currentPasswordInput.value;
                const newPassword = newPasswordInput.value;
                const confirmNewPassword = confirmNewPasswordInput.value;
                
                if (!currentPassword || !newPassword || !confirmNewPassword) {
                    alert('يرجى إدخال جميع البيانات المطلوبة');
                    return;
                }
                
                if (newPassword.length < 6) {
                    alert('يجب أن تكون كلمة المرور الجديدة 6 أحرف على الأقل');
                    return;
                }
                
                if (newPassword !== confirmNewPassword) {
                    alert('كلمة المرور الجديدة وتأكيدها غير متطابقين');
                    return;
                }
                
                // تغيير كلمة المرور
                if (window.firebase && firebase.auth().currentUser) {
                    // الحصول على بيانات إعادة المصادقة
                    const credential = firebase.auth.EmailAuthProvider.credential(
                        firebase.auth().currentUser.email,
                        currentPassword
                    );
                    
                    // إعادة المصادقة
                    firebase.auth().currentUser.reauthenticateWithCredential(credential)
                        .then(() => {
                            // تغيير كلمة المرور
                            return firebase.auth().currentUser.updatePassword(newPassword);
                        })
                        .then(() => {
                            alert('تم تغيير كلمة المرور بنجاح');
                            passwordModal.classList.remove('active');
                        })
                        .catch(error => {
                            console.error('خطأ في تغيير كلمة المرور:', error);
                            
                            let errorMessage = 'حدث خطأ أثناء تغيير كلمة المرور';
                            
                            if (error.code === 'auth/wrong-password') {
                                errorMessage = 'كلمة المرور الحالية غير صحيحة';
                            } else if (error.code === 'auth/weak-password') {
                                errorMessage = 'كلمة المرور الجديدة ضعيفة جداً';
                            }
                            
                            alert(errorMessage);
                        });
                }
            });
        }
    }
    
    // إظهار النافذة
    passwordModal.classList.add('active');
}

/**
 * إضافة مستمعي الأحداث للنافذة المنبثقة
 * @param {HTMLElement} modal - عنصر النافذة
 */
function setupBasicModalListeners(modal) {
    if (!modal) return;
    
    // إغلاق النافذة عند النقر على زر الإغلاق
    const closeButtons = modal.querySelectorAll('.modal-close, .modal-close-btn');
    closeButtons.forEach(button => {
        button.addEventListener('click', function() {
            modal.classList.remove('active');
        });
    });
    
    // إغلاق النافذة عند النقر خارجها
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            modal.classList.remove('active');
        }
    });
}

/**
 * الحصول على تسمية نوع المستخدم
 * @param {string} userType - نوع المستخدم
 * @returns {string} - تسمية نوع المستخدم
 */
function getUserTypeLabel(userType) {
    switch (userType) {
        case 'admin':
            return 'مسؤول النظام';
        case 'manager':
            return 'مدير';
        case 'user':
            return 'مستخدم';
        default:
            return 'غير معروف';
    }
}

/**
 * تحديث معلومات المستخدم في واجهة المستخدم
 */
function updateUserInfo() {
    // الحصول على معلومات المستخدم الحالي
    let currentUser = null;
    if (window.AuthSystem && typeof window.AuthSystem.getUserInfo === 'function') {
        currentUser = window.AuthSystem.getUserInfo();
    }
    
    if (!currentUser) return;
    
    // تحديث اسم المستخدم في القائمة المنسدلة
    const userNameElements = document.querySelectorAll('.user-name');
    userNameElements.forEach(element => {
        element.textContent = currentUser.displayName || currentUser.email;
    });
    
    // تحديث أيقونة المستخدم
    const userAvatars = document.querySelectorAll('.user-avatar:not(.large)');
    userAvatars.forEach(avatar => {
        avatar.textContent = (currentUser.displayName || currentUser.email).charAt(0).toUpperCase();
    });
    
    // تحديث نوع المستخدم
    const userTypeElements = document.querySelectorAll('.user-type');
    userTypeElements.forEach(element => {
        element.textContent = getUserTypeLabel(currentUser.type);
    });
    
    // إضافة فئة المستخدم لعنصر الجسم
    document.body.setAttribute('data-user-type', currentUser.type);
}

/**
 * الانتقال إلى صفحة في التطبيق
 * @param {string} pageName - اسم الصفحة
 */
function navigateToPage(pageName) {
    // إخفاء جميع الصفحات
    const pages = document.querySelectorAll('.page');
    pages.forEach(page => {
        page.classList.remove('active');
    });
    
    // إزالة التنشيط من جميع روابط التنقل
    const navLinks = document.querySelectorAll('.nav-link');
    navLinks.forEach(link => {
        link.classList.remove('active');
    });
    
    // عرض الصفحة المطلوبة وتنشيط الرابط المناظر
    const targetPage = document.getElementById(`${pageName}-page`);
    const targetLink = document.querySelector(`.nav-link[data-page="${pageName}"]`);
    
    if (targetPage) {
        targetPage.classList.add('active');
    } else {
        // إنشاء صفحة جديدة إذا لم تكن موجودة
        createPage(pageName);
    }
    
    if (targetLink) {
        targetLink.classList.add('active');
    }
}

/**
 * إنشاء صفحة جديدة
 * @param {string} pageName - اسم الصفحة
 */
function createPage(pageName) {
    if (pageName === 'user-management') {
        createUserManagementPage();
    }
}

/**
 * إنشاء صفحة إدارة المستخدمين
 */
function createUserManagementPage() {
    // التحقق مما إذا كانت الصفحة موجودة مسبقاً
    if (document.getElementById('user-management-page')) {
        return;
    }
    
    // إنشاء عنصر الصفحة
    const page = document.createElement('div');
    page.id = 'user-management-page';
    page.className = 'page user-management-page';
    
    // محتوى الصفحة
    page.innerHTML = `
        <div class="header">
            <button class="toggle-sidebar">
                <i class="fas fa-bars"></i>
            </button>
            <h1 class="page-title">إدارة المستخدمين</h1>
            <div class="header-actions">
                <div class="search-box">
                    <input class="search-input" placeholder="بحث عن مستخدم..." type="text" />
                    <i class="fas fa-search search-icon"></i>
                </div>
                <button class="btn btn-primary" id="add-user-btn">
                    <i class="fas fa-plus"></i>
                    <span>إضافة مستخدم</span>
                </button>
            </div>
        </div>
        
        <div class="section">
            <div class="section-header">
                <h2 class="section-title">قائمة المستخدمين</h2>
                <div class="section-actions">
                    <button class="btn btn-outline btn-sm" id="refresh-users-btn">
                        <i class="fas fa-sync-alt"></i>
                        <span>تحديث</span>
                    </button>
                </div>
            </div>
            <div class="table-container">
                <table id="users-table" class="data-table">
                    <thead>
                        <tr>
                            <th>المعرف</th>
                            <th>الاسم</th>
                            <th>البريد الإلكتروني</th>
                            <th>نوع المستخدم</th>
                            <th>تاريخ الإنشاء</th>
                            <th>الحالة</th>
                            <th>الإجراءات</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="7" class="text-center">جارٍ تحميل بيانات المستخدمين...</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    `;
    
    // إضافة الصفحة إلى المحتوى الرئيسي
    const mainContent = document.querySelector('.main-content');
    if (mainContent) {
        mainContent.appendChild(page);
        
        // إضافة مستمعي الأحداث
        setupUserManagementListeners(page);
        
        // تحميل بيانات المستخدمين
        loadUsers();
    }
    
    // عرض الصفحة
    page.classList.add('active');
}

/**
 * إعداد مستمعي أحداث صفحة إدارة المستخدمين
 * @param {HTMLElement} page - عنصر الصفحة
 */
function setupUserManagementListeners(page) {
    if (!page) return;
    
    // زر إضافة مستخدم
    const addUserBtn = page.querySelector('#add-user-btn');
    if (addUserBtn) {
        addUserBtn.addEventListener('click', function() {
            showAddUserModal();
        });
    }
    
    // زر تحديث قائمة المستخدمين
    const refreshUsersBtn = page.querySelector('#refresh-users-btn');
    if (refreshUsersBtn) {
        refreshUsersBtn.addEventListener('click', function() {
            loadUsers();
        });
    }
    
    // مربع البحث
    const searchInput = page.querySelector('.search-input');
    if (searchInput) {
        searchInput.addEventListener('input', function() {
            filterUsers(this.value);
        });
    }
    
    // زر تبديل الشريط الجانبي
    const toggleSidebarBtn = page.querySelector('.toggle-sidebar');
    if (toggleSidebarBtn) {
        toggleSidebarBtn.addEventListener('click', function() {
            document.body.classList.toggle('sidebar-collapsed');
        });
    }
}

/**
 * إصلاح خطأ التعامل مع Promise في دالة loadUsers
 * يجب استبدال دالة loadUsers الحالية بهذه النسخة المصححة
 */

function loadUsers() {
    const usersTableBody = document.querySelector('#users-table tbody');
    if (!usersTableBody) {
        return Promise.reject('لم يتم العثور على جدول المستخدمين');
    }
    
    // عرض رسالة التحميل
    usersTableBody.innerHTML = '<tr><td colspan="7" class="text-center">جارٍ تحميل بيانات المستخدمين...</td></tr>';
    
    // إرجاع Promise للتعامل مع البيانات
    if (window.firebase && window.firebase.database) {
        return firebase.database().ref('users').once('value')
            .then(snapshot => {
                const users = [];
                
                // جمع المستخدمين
                snapshot.forEach(childSnapshot => {
                    const userId = childSnapshot.key;
                    const userData = childSnapshot.val();
                    
                    if (userData && userData.profile) {
                        users.push({
                            id: userId,
                            ...userData.profile
                        });
                    }
                });
                
                // عرض المستخدمين في الجدول
                renderUsersTable(users);
                return users; // إرجاع المستخدمين للتعامل معهم لاحقاً
            })
            .catch(error => {
                console.error('خطأ في تحميل المستخدمين:', error);
                usersTableBody.innerHTML = '<tr><td colspan="7" class="text-center text-danger">خطأ في تحميل بيانات المستخدمين</td></tr>';
                throw error; // إعادة رمي الخطأ للتعامل معه في المستوى الأعلى
            });
    } else {
        // للعرض التوضيحي - إرجاع Promise مع بيانات تجريبية
        return new Promise((resolve) => {
            const demoUsers = [
                {
                    id: 'admin1',
                    email: 'admin@example.com',
                    displayName: 'مدير النظام',
                    type: 'admin',
                    createdAt: '2023-01-01T00:00:00.000Z',
                    emailVerified: true
                },
                {
                    id: 'manager1',
                    email: 'manager@example.com',
                    displayName: 'مدير',
                    type: 'manager',
                    createdAt: '2023-02-15T00:00:00.000Z',
                    emailVerified: true
                },
                {
                    id: 'user1',
                    email: 'user@example.com',
                    displayName: 'مستخدم عادي',
                    type: 'user',
                    createdAt: '2023-03-20T00:00:00.000Z',
                    emailVerified: false
                }
            ];
            
            renderUsersTable(demoUsers);
            resolve(demoUsers);
        });
    }
}
/**
 * عرض المستخدمين في الجدول
 * @param {Array} users - مصفوفة المستخدمين
 */
function renderUsersTable(users) {
    const usersTableBody = document.querySelector('#users-table tbody');
    if (!usersTableBody) return;
    
    if (!users || users.length === 0) {
        usersTableBody.innerHTML = '<tr><td colspan="7" class="text-center">لا يوجد مستخدمين</td></tr>';
        return;
    }
    
    // تفريغ الجدول
    usersTableBody.innerHTML = '';
    
    // إضافة المستخدمين
    users.forEach(user => {
        const row = document.createElement('tr');
        row.setAttribute('data-id', user.id);
        row.setAttribute('data-email', user.email);
        row.setAttribute('data-type', user.type || 'user');
        
        // تنسيق التاريخ
        const createdDate = user.createdAt ? new Date(user.createdAt) : new Date();
        const formattedDate = createdDate.toLocaleDateString('ar-SA', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });
        
        // إنشاء محتوى الصف
        row.innerHTML = `
            <td>${user.id}</td>
            <td>${user.displayName || 'غير محدد'}</td>
            <td>${user.email}</td>
            <td><span class="badge ${user.type || 'user'}">${getUserTypeLabel(user.type || 'user')}</span></td>
            <td>${formattedDate}</td>
            <td>${user.emailVerified ? '<span class="badge success">موثق</span>' : '<span class="badge warning">غير موثق</span>'}</td>
            <td class="action-buttons">
                <button class="btn btn-icon-sm edit-user-btn" title="تعديل">
                    <i class="fas fa-edit"></i>
                </button>
                <button class="btn btn-icon-sm permissions-user-btn" title="الصلاحيات">
                    <i class="fas fa-key"></i>
                </button>
                <button class="btn btn-icon-sm delete-user-btn" title="حذف">
                    <i class="fas fa-trash"></i>
                </button>
            </td>
        `;
        
        // إضافة مستمعي الأحداث للأزرار
        const editBtn = row.querySelector('.edit-user-btn');
        if (editBtn) {
            editBtn.addEventListener('click', function() {
                showEditUserModal(user);
            });
        }
        
        const permissionsBtn = row.querySelector('.permissions-user-btn');
        if (permissionsBtn) {
            permissionsBtn.addEventListener('click', function() {
                showUserPermissionsModal(user);
            });
        }
        
        const deleteBtn = row.querySelector('.delete-user-btn');
        if (deleteBtn) {
            deleteBtn.addEventListener('click', function() {
                confirmDeleteUser(user);
            });
        }
        
        usersTableBody.appendChild(row);
    });
}

/**
 * تصفية المستخدمين حسب نص البحث
 * @param {string} searchText - نص البحث
 */
function filterUsers(searchText) {
    const rows = document.querySelectorAll('#users-table tbody tr');
    const searchLower = searchText.toLowerCase();
    
    rows.forEach(row => {
        const email = row.getAttribute('data-email') || '';
        const name = row.querySelector('td:nth-child(2)').textContent || '';
        
        if (email.toLowerCase().includes(searchLower) || name.toLowerCase().includes(searchLower)) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    });
}


/**
 * الوظائف المكملة لإدارة المستخدمين
 * يجب إضافتها لملف user-profile-integration.js
 */

/**
 * عرض نافذة إضافة مستخدم جديد
 */
function showAddUserModal() {
    // التحقق من وجود النافذة
    let addUserModal = document.getElementById('add-user-modal');
    
    if (!addUserModal) {
        // إنشاء نافذة إضافة المستخدم
        addUserModal = document.createElement('div');
        addUserModal.id = 'add-user-modal';
        addUserModal.className = 'modal-overlay';
        
        addUserModal.innerHTML = `
            <div class="modal">
                <div class="modal-header">
                    <h3 class="modal-title">إضافة مستخدم جديد</h3>
                    <button class="modal-close">&times;</button>
                </div>
                <div class="modal-body">
                    <form id="add-user-form">
                        <div class="form-group">
                            <label class="form-label">الاسم الكامل *</label>
                            <input type="text" class="form-input" id="new-user-name" required>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">البريد الإلكتروني *</label>
                            <input type="email" class="form-input" id="new-user-email" required>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">كلمة المرور *</label>
                            <div class="password-input-container">
                                <input type="password" class="form-input" id="new-user-password" required minlength="6">
                                <button type="button" class="toggle-password">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">نوع المستخدم *</label>
                            <select class="form-select" id="new-user-type" required>
                                <option value="">-- اختر نوع المستخدم --</option>
                                <option value="user">مستخدم عادي</option>
                                <option value="manager">مدير</option>
                                <option value="admin">مسؤول النظام</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">
                                <input type="checkbox" id="send-verification-email" checked>
                                إرسال بريد إلكتروني للتحقق
                            </label>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-outline modal-close-btn">إلغاء</button>
                    <button class="btn btn-primary" id="save-new-user-btn">إضافة مستخدم</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(addUserModal);
        
        // إضافة مستمعي الأحداث
        setupBasicModalListeners(addUserModal);
        
        // مستمع حدث لتبديل إظهار كلمة المرور
        const togglePasswordBtn = addUserModal.querySelector('.toggle-password');
        if (togglePasswordBtn) {
            togglePasswordBtn.addEventListener('click', function() {
                const passwordInput = this.parentElement.querySelector('input');
                if (passwordInput.type === 'password') {
                    passwordInput.type = 'text';
                    this.querySelector('i').classList.remove('fa-eye');
                    this.querySelector('i').classList.add('fa-eye-slash');
                } else {
                    passwordInput.type = 'password';
                    this.querySelector('i').classList.remove('fa-eye-slash');
                    this.querySelector('i').classList.add('fa-eye');
                }
            });
        }
        
        // مستمع حدث لزر حفظ المستخدم الجديد
        const saveNewUserBtn = addUserModal.querySelector('#save-new-user-btn');
        if (saveNewUserBtn) {
            saveNewUserBtn.addEventListener('click', function() {
                saveNewUser();
            });
        }
    }
    
    // إظهار النافذة
    addUserModal.classList.add('active');
}


// تحديث دالة حفظ المستخدم الجديد لاستخدام Promise بشكل صحيح
function saveNewUser() {
    const name = document.getElementById('new-user-name').value.trim();
    const email = document.getElementById('new-user-email').value.trim();
    const password = document.getElementById('new-user-password').value;
    const type = document.getElementById('new-user-type').value;
    const sendVerification = document.getElementById('send-verification-email').checked;
    
    // التحقق من البيانات
    if (!name || !email || !password || !type) {
        alert('يرجى إدخال جميع البيانات المطلوبة');
        return;
    }
    
    if (password.length < 6) {
        alert('يجب أن تكون كلمة المرور 6 أحرف على الأقل');
        return;
    }
    
    // إضافة المستخدم باستخدام Firebase
    if (window.firebase && firebase.auth) {
        // إنشاء المستخدم
        firebase.auth().createUserWithEmailAndPassword(email, password)
            .then(userCredential => {
                const user = userCredential.user;
                
                // تحديث ملف المستخدم
                return user.updateProfile({
                    displayName: name
                }).then(() => {
                    // إرسال بريد التحقق إذا تم اختياره
                    if (sendVerification) {
                        user.sendEmailVerification();
                    }
                    
                    // حفظ بيانات المستخدم في قاعدة البيانات
                    if (firebase.database) {
                        return firebase.database().ref(`users/${user.uid}`).set({
                            profile: {
                                email: email,
                                displayName: name,
                                type: type,
                                createdAt: firebase.database.ServerValue.TIMESTAMP,
                                emailVerified: user.emailVerified
                            },
                            permissions: getDefaultPermissions(type)
                        });
                    }
                });
            })
            .then(() => {
                alert('تم إضافة المستخدم بنجاح');
                document.getElementById('add-user-modal').classList.remove('active');
                
                // استخدام loadUsers بشكل صحيح مع التعامل مع Promise
                return loadUsers();
            })
            .then(() => {
                // أي عمليات إضافية بعد تحميل المستخدمين
                console.log('تم تحديث قائمة المستخدمين بنجاح');
            })
            .catch(error => {
                console.error('خطأ في إضافة المستخدم:', error);
                let errorMessage = 'حدث خطأ أثناء إضافة المستخدم';
                
                if (error.code === 'auth/email-already-in-use') {
                    errorMessage = 'البريد الإلكتروني مستخدم بالفعل';
                } else if (error.code === 'auth/invalid-email') {
                    errorMessage = 'البريد الإلكتروني غير صالح';
                } else if (error.code === 'auth/weak-password') {
                    errorMessage = 'كلمة المرور ضعيفة جداً';
                }
                
                alert(errorMessage);
            });
    } else {
        // للعرض التوضيحي
        alert('تم إضافة المستخدم بنجاح (عرض توضيحي)');
        document.getElementById('add-user-modal').classList.remove('active');
        
        // استخدام loadUsers بشكل صحيح
        loadUsers().then(() => {
            console.log('تم تحديث قائمة المستخدمين بنجاح');
        }).catch(error => {
            console.error('خطأ في تحديث قائمة المستخدمين:', error);
        });
    }
}

/**
 * عرض نافذة تعديل المستخدم
 * @param {Object} user - بيانات المستخدم
 */
function showEditUserModal(user) {
    // التحقق من وجود النافذة
    let editUserModal = document.getElementById('edit-user-modal');
    
    if (!editUserModal) {
        // إنشاء نافذة تعديل المستخدم
        editUserModal = document.createElement('div');
        editUserModal.id = 'edit-user-modal';
        editUserModal.className = 'modal-overlay';
        
        editUserModal.innerHTML = `
            <div class="modal">
                <div class="modal-header">
                    <h3 class="modal-title">تعديل بيانات المستخدم</h3>
                    <button class="modal-close">&times;</button>
                </div>
                <div class="modal-body">
                    <form id="edit-user-form">
                        <input type="hidden" id="edit-user-id">
                        
                        <div class="form-group">
                            <label class="form-label">الاسم الكامل *</label>
                            <input type="text" class="form-input" id="edit-user-name" required>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">البريد الإلكتروني</label>
                            <input type="email" class="form-input" id="edit-user-email" readonly>
                            <small class="form-help">لا يمكن تغيير البريد الإلكتروني</small>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">نوع المستخدم *</label>
                            <select class="form-select" id="edit-user-type" required>
                                <option value="user">مستخدم عادي</option>
                                <option value="manager">مدير</option>
                                <option value="admin">مسؤول النظام</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">
                                <input type="checkbox" id="edit-user-active">
                                حساب نشط
                            </label>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-outline modal-close-btn">إلغاء</button>
                    <button class="btn btn-primary" id="save-user-changes-btn">حفظ التغييرات</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(editUserModal);
        
        // إضافة مستمعي الأحداث
        setupBasicModalListeners(editUserModal);
        
        // مستمع حدث لزر حفظ التغييرات
        const saveChangesBtn = editUserModal.querySelector('#save-user-changes-btn');
        if (saveChangesBtn) {
            saveChangesBtn.addEventListener('click', function() {
                saveUserChanges();
            });
        }
    }
    
    // ملء النموذج ببيانات المستخدم
    document.getElementById('edit-user-id').value = user.id;
    document.getElementById('edit-user-name').value = user.displayName || '';
    document.getElementById('edit-user-email').value = user.email;
    document.getElementById('edit-user-type').value = user.type || 'user';
    document.getElementById('edit-user-active').checked = user.isActive !== false;
    
    // إظهار النافذة
    editUserModal.classList.add('active');
}

/**
 * حفظ تغييرات المستخدم
 */
function saveUserChanges() {
    const userId = document.getElementById('edit-user-id').value;
    const name = document.getElementById('edit-user-name').value.trim();
    const type = document.getElementById('edit-user-type').value;
    const isActive = document.getElementById('edit-user-active').checked;
    
    // التحقق من البيانات
    if (!name || !type) {
        alert('يرجى إدخال جميع البيانات المطلوبة');
        return;
    }
    
    // تحديث بيانات المستخدم في قاعدة البيانات
    if (window.firebase && firebase.database) {
        firebase.database().ref(`users/${userId}/profile`).update({
            displayName: name,
            type: type,
            isActive: isActive,
            updatedAt: firebase.database.ServerValue.TIMESTAMP
        })
        .then(() => {
            // تحديث الصلاحيات إذا تغير نوع المستخدم
            return firebase.database().ref(`users/${userId}/permissions`).set(
                getDefaultPermissions(type)
            );
        })
        .then(() => {
            alert('تم تحديث بيانات المستخدم بنجاح');
            document.getElementById('edit-user-modal').classList.remove('active');
            loadUsers(); // تحديث قائمة المستخدمين
        })
        .catch(error => {
            console.error('خطأ في تحديث بيانات المستخدم:', error);
            alert('حدث خطأ أثناء تحديث بيانات المستخدم');
        });
    } else {
        // للعرض التوضيحي
        alert('تم تحديث بيانات المستخدم بنجاح (عرض توضيحي)');
        document.getElementById('edit-user-modal').classList.remove('active');
        loadUsers();
    }
}

/**
 * عرض نافذة صلاحيات المستخدم
 * @param {Object} user - بيانات المستخدم
 */
function showUserPermissionsModal(user) {
    // التحقق من وجود النافذة
    let permissionsModal = document.getElementById('user-permissions-modal');
    
    if (!permissionsModal) {
        // إنشاء نافذة صلاحيات المستخدم
        permissionsModal = document.createElement('div');
        permissionsModal.id = 'user-permissions-modal';
        permissionsModal.className = 'modal-overlay';
        
        permissionsModal.innerHTML = `
            <div class="modal permissions-modal">
                <div class="modal-header">
                    <h3 class="modal-title">صلاحيات المستخدم</h3>
                    <button class="modal-close">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="user-info-header">
                        <h4 id="permissions-user-name"></h4>
                        <p id="permissions-user-email"></p>
                        <span id="permissions-user-type" class="badge"></span>
                    </div>
                    
                    <div class="permissions-list">
                        <h4>الصلاحيات المتاحة</h4>
                        
                        <div class="permission-group">
                            <h5>إدارة المستخدمين</h5>
                            
                            <div class="permission-item">
                                <label>
                                    <input type="checkbox" id="perm-canCreateUsers">
                                    إنشاء مستخدمين جدد
                                </label>
                            </div>
                            
                            <div class="permission-item">
                                <label>
                                    <input type="checkbox" id="perm-canDeleteUsers">
                                    حذف المستخدمين
                                </label>
                            </div>
                        </div>
                        
                        <div class="permission-group">
                            <h5>إدارة النظام</h5>
                            
                            <div class="permission-item">
                                <label>
                                    <input type="checkbox" id="perm-canManageSettings">
                                    إدارة إعدادات النظام
                                </label>
                            </div>
                            
                            <div class="permission-item">
                                <label>
                                    <input type="checkbox" id="perm-canDeleteInvestors">
                                    حذف المستثمرين
                                </label>
                            </div>
                        </div>
                        
                        <div class="permission-group">
                            <h5>التقارير والبيانات</h5>
                            
                            <div class="permission-item">
                                <label>
                                    <input type="checkbox" id="perm-canExportData">
                                    تصدير البيانات
                                </label>
                            </div>
                            
                            <div class="permission-item">
                                <label>
                                    <input type="checkbox" id="perm-canImportData">
                                    استيراد البيانات
                                </label>
                            </div>
                        </div>
                        
                        <div class="permission-group">
                            <h5>النسخ الاحتياطي</h5>
                            
                            <div class="permission-item">
                                <label>
                                    <input type="checkbox" id="perm-canCreateBackup">
                                    إنشاء نسخ احتياطية
                                </label>
                            </div>
                            
                            <div class="permission-item">
                                <label>
                                    <input type="checkbox" id="perm-canRestoreBackup">
                                    استعادة النسخ الاحتياطية
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-outline" id="reset-to-default-btn">
                        إعادة تعيين للقيم الافتراضية
                    </button>
                    <button class="btn btn-primary" id="save-permissions-btn">
                        حفظ الصلاحيات
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(permissionsModal);
        
        // إضافة مستمعي الأحداث
        setupBasicModalListeners(permissionsModal);
        
        // مستمع حدث لزر إعادة التعيين
        const resetBtn = permissionsModal.querySelector('#reset-to-default-btn');
        if (resetBtn) {
            resetBtn.addEventListener('click', function() {
                resetPermissionsToDefault(user.type || 'user');
            });
        }
        
        // مستمع حدث لزر حفظ الصلاحيات
        const savePermissionsBtn = permissionsModal.querySelector('#save-permissions-btn');
        if (savePermissionsBtn) {
            savePermissionsBtn.addEventListener('click', function() {
                saveUserPermissions(user.id);
            });
        }
    }
    
    // ملء معلومات المستخدم
    document.getElementById('permissions-user-name').textContent = user.displayName || 'غير محدد';
    document.getElementById('permissions-user-email').textContent = user.email;
    const userTypeSpan = document.getElementById('permissions-user-type');
    userTypeSpan.textContent = getUserTypeLabel(user.type || 'user');
    userTypeSpan.className = `badge ${user.type || 'user'}`;
    
    // تحميل صلاحيات المستخدم الحالية
    loadUserPermissions(user.id);
    
    // إظهار النافذة
    permissionsModal.classList.add('active');
}

/**
 * تحميل صلاحيات المستخدم
 * @param {string} userId - معرف المستخدم
 */
function loadUserPermissions(userId) {
    if (window.firebase && firebase.database) {
        firebase.database().ref(`users/${userId}/permissions`).once('value')
            .then(snapshot => {
                const permissions = snapshot.val() || {};
                
                // تحديث حالة خانات الاختيار
                for (const [key, value] of Object.entries(permissions)) {
                    const checkbox = document.getElementById(`perm-${key}`);
                    if (checkbox) {
                        checkbox.checked = value;
                    }
                }
            })
            .catch(error => {
                console.error('خطأ في تحميل صلاحيات المستخدم:', error);
                alert('حدث خطأ أثناء تحميل الصلاحيات');
            });
    } else {
        // للعرض التوضيحي، استخدام الصلاحيات الافتراضية
        const defaultPermissions = getDefaultPermissions('user');
        for (const [key, value] of Object.entries(defaultPermissions)) {
            const checkbox = document.getElementById(`perm-${key}`);
            if (checkbox) {
                checkbox.checked = value;
            }
        }
    }
}

/**
 * إعادة تعيين الصلاحيات للقيم الافتراضية
 * @param {string} userType - نوع المستخدم
 */
function resetPermissionsToDefault(userType) {
    const defaultPermissions = getDefaultPermissions(userType);
    
    for (const [key, value] of Object.entries(defaultPermissions)) {
        const checkbox = document.getElementById(`perm-${key}`);
        if (checkbox) {
            checkbox.checked = value;
        }
    }
}

/**
 * حفظ صلاحيات المستخدم
 * @param {string} userId - معرف المستخدم
 */
function saveUserPermissions(userId) {
    const permissions = {};
    
    // جمع الصلاحيات من خانات الاختيار
    const permissionCheckboxes = document.querySelectorAll('[id^="perm-"]');
    permissionCheckboxes.forEach(checkbox => {
        const permissionName = checkbox.id.replace('perm-', '');
        permissions[permissionName] = checkbox.checked;
    });
    
    // حفظ الصلاحيات في قاعدة البيانات
    if (window.firebase && firebase.database) {
        firebase.database().ref(`users/${userId}/permissions`).set(permissions)
            .then(() => {
                alert('تم حفظ الصلاحيات بنجاح');
                document.getElementById('user-permissions-modal').classList.remove('active');
            })
            .catch(error => {
                console.error('خطأ في حفظ الصلاحيات:', error);
                alert('حدث خطأ أثناء حفظ الصلاحيات');
            });
    } else {
        // للعرض التوضيحي
        alert('تم حفظ الصلاحيات بنجاح (عرض توضيحي)');
        document.getElementById('user-permissions-modal').classList.remove('active');
    }
}

/**
 * تأكيد حذف المستخدم
 * @param {Object} user - بيانات المستخدم
 */
function confirmDeleteUser(user) {
    // التحقق من أن المستخدم ليس المستخدم الحالي
    if (window.firebase && firebase.auth().currentUser && 
        firebase.auth().currentUser.uid === user.id) {
        alert('لا يمكنك حذف حسابك الخاص');
        return;
    }
    
    // التحقق من أن المستخدم ليس المسؤول الوحيد
    if (user.type === 'admin') {
        // التحقق من عدد المسؤولين
        checkAdminCount().then(adminCount => {
            if (adminCount <= 1) {
                alert('لا يمكن حذف المسؤول الوحيد في النظام');
                return;
            }
            
            // متابعة عملية الحذف
            proceedWithDeletion();
        });
    } else {
        proceedWithDeletion();
    }
    
    function proceedWithDeletion() {
        const confirmMessage = `هل أنت متأكد من رغبتك في حذف المستخدم "${user.displayName || user.email}"؟\n\nهذا الإجراء لا يمكن التراجع عنه.`;
        
        if (confirm(confirmMessage)) {
            deleteUser(user.id);
        }
    }
}

/**
 * التحقق من عدد المسؤولين في النظام
 * @returns {Promise<number>} - عدد المسؤولين
 */
function checkAdminCount() {
    if (window.firebase && firebase.database) {
        return firebase.database().ref('users').once('value')
            .then(snapshot => {
                let adminCount = 0;
                
                snapshot.forEach(childSnapshot => {
                    const userData = childSnapshot.val();
                    if (userData.profile && userData.profile.type === 'admin') {
                        adminCount++;
                    }
                });
                
                return adminCount;
            });
    } else {
        // للعرض التوضيحي
        return Promise.resolve(2);
    }
}

/**
 * حذف المستخدم
 * @param {string} userId - معرف المستخدم
 */
function deleteUser(userId) {
    if (window.firebase && firebase.database) {
        // حذف بيانات المستخدم من قاعدة البيانات
        firebase.database().ref(`users/${userId}`).remove()
            .then(() => {
                // ملاحظة: لا يمكن حذف حساب المستخدم من Firebase Auth مباشرة
                // يتطلب ذلك استخدام Firebase Admin SDK من الخادم
                
                alert('تم حذف بيانات المستخدم بنجاح');
                loadUsers(); // تحديث قائمة المستخدمين
            })
            .catch(error => {
                console.error('خطأ في حذف المستخدم:', error);
                alert('حدث خطأ أثناء حذف المستخدم');
            });
    } else {
        // للعرض التوضيحي
        alert('تم حذف المستخدم بنجاح (عرض توضيحي)');
        
        // حذف الصف من الجدول مباشرة للعرض
        const row = document.querySelector(`#users-table tr[data-id="${userId}"]`);
        if (row) {
            row.remove();
        }
    }
}

// إضافة أنماط CSS إضافية لنوافذ إدارة المستخدمين
function addUserManagementStyles() {
    const styleElement = document.createElement('style');
    styleElement.textContent = `
        .permissions-modal {
            max-width: 600px;
        }
        
        .user-info-header {
            text-align: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid #e5e7eb;
        }
        
        .user-info-header h4 {
            margin: 0 0 5px 0;
            font-size: 1.2rem;
        }
        
        .user-info-header p {
            margin: 0 0 10px 0;
            color: #6b7280;
        }
        
        .permissions-list {
            margin-top: 15px;
        }
        
        .permissions-list h4 {
            font-size: 1.1rem;
            margin-bottom: 15px;
            color: #374151;
        }
        
        .permission-group {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #f9fafb;
            border-radius: 8px;
        }
        
        .permission-group h5 {
            font-size: 0.95rem;
            margin: 0 0 10px 0;
            color: #4b5563;
        }
        
        .permission-item {
            margin-bottom: 8px;
        }
        
        .permission-item label {
            display: flex;
            align-items: center;
            cursor: pointer;
        }
        
        .permission-item input[type="checkbox"] {
            margin-left: 8px;
        }
        
        .password-input-container {
            position: relative;
        }
        
        .toggle-password {
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: #6b7280;
            cursor: pointer;
            padding: 5px;
        }
        
        .toggle-password:hover {
            color: #374151;
        }
        
        .form-help {
            display: block;
            margin-top: 5px;
            font-size: 0.85rem;
            color: #6b7280;
        }
        
        /* تنسيقات إضافية للجدول */
        .action-buttons {
            display: flex;
            gap: 5px;
            justify-content: center;
        }
        
        .btn-icon-sm {
            width: 32px;
            height: 32px;
            padding: 0;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            border-radius: 6px;
            border: 1px solid #e5e7eb;
            background: #fff;
            color: #6b7280;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .btn-icon-sm:hover {
            background-color: #f9fafb;
            color: #374151;
        }
        
        .edit-user-btn:hover {
            border-color: #3b82f6;
            color: #3b82f6;
        }
        
        .permissions-user-btn:hover {
            border-color: #f59e0b;
            color: #f59e0b;
        }
        
        .delete-user-btn:hover {
            border-color: #ef4444;
            color: #ef4444;
        }
        
        .badge {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: none;
        }
        
        .badge.admin {
            background-color: #fef2f2;
            color: #dc2626;
        }
        
        .badge.manager {
            background-color: #fffbeb;
            color: #d97706;
        }
        
        .badge.user {
            background-color: #eff6ff;
            color: #2563eb;
        }
        
        .badge.success {
            background-color: #ecfdf5;
            color: #059669;
        }
        
        .badge.warning {
            background-color: #fffbeb;
            color: #d97706;
        }
        
        /* تنسيقات الجدول المستجيب */
        @media (max-width: 768px) {
            .table-container {
                overflow-x: auto;
            }
            
            .data-table th, .data-table td {
                white-space: nowrap;
            }
            
            .action-buttons {
                flex-direction: column;
                gap: 3px;
            }
            
            .btn-icon-sm {
                width: 28px;
                height: 28px;
            }
        }
    `;
    
    document.head.appendChild(styleElement);
}

// تحديث دالة التهيئة للتعامل مع الأخطاء بشكل أفضل
document.addEventListener('DOMContentLoaded', function() {
    // التحقق من وجود العناصر المطلوبة قبل إعداد المستمعين
    const usersTable = document.getElementById('users-table');
    if (usersTable) {
        setupRealtimeUsersListener();
        
        // تحميل المستخدمين الأولي مع معالجة الأخطاء
        safeLoadUsers()
            .then(() => {
                console.log('تم تحميل المستخدمين بنجاح');
            })
            .catch(error => {
                console.error('خطأ في التحميل الأولي للمستخدمين:', error);
            });
    } else {
        console.warn('لم يتم العثور على جدول المستخدمين في الصفحة');
    }
});
// دالة لتحديث العناصر المرئية حسب صلاحيات المستخدم
function updatePermissionBasedUI() {
    let currentUser = null;
    if (window.AuthSystem && typeof window.AuthSystem.getUserInfo === 'function') {
        currentUser = window.AuthSystem.getUserInfo();
    }
    
    if (!currentUser || !currentUser.permissions) return;
    
    // إظهار/إخفاء عناصر القائمة الجانبية حسب الصلاحيات
    const navItems = document.querySelectorAll('.nav-item[data-permission]');
    navItems.forEach(item => {
        const permissionRequired = item.getAttribute('data-permission');
        if (permissionRequired && currentUser.permissions[permissionRequired]) {
            item.style.display = '';
        } else {
            item.style.display = 'none';
        }
    });
    
    // إظهار/إخفاء أزرار الإجراءات حسب الصلاحيات
    const actionButtons = {
        '.delete-investor-btn': 'canDeleteInvestors',
        '.export-data-btn': 'canExportData',
        '.import-data-btn': 'canImportData',
        '.backup-btn': 'canCreateBackup',
        '.restore-btn': 'canRestoreBackup'
    };
    
    for (const [selector, permission] of Object.entries(actionButtons)) {
        const buttons = document.querySelectorAll(selector);
        buttons.forEach(button => {
            if (currentUser.permissions[permission]) {
                button.style.display = '';
            } else {
                button.style.display = 'none';
            }
        });
    }
}

// تحديث صلاحيات المستخدم بعد تسجيل الدخول
document.addEventListener('userLoggedIn', function(event) {
    refreshUserInterface();
});

// إضافة دعم لأحداث مخصصة
if (window.AuthSystem) {
    const originalLogin = window.AuthSystem.login;
    window.AuthSystem.login = function(...args) {
        return originalLogin.apply(this, args).then(result => {
            // إطلاق حدث مخصص بعد تسجيل الدخول
            const loginEvent = new CustomEvent('userLoggedIn', { detail: result });
            document.dispatchEvent(loginEvent);
            return result;
        });
    };
    
    const originalLogout = window.AuthSystem.logout;
    window.AuthSystem.logout = function(...args) {
        return originalLogout.apply(this, args).then(result => {
            // إطلاق حدث مخصص بعد تسجيل الخروج
            const logoutEvent = new CustomEvent('userLoggedOut');
            document.dispatchEvent(logoutEvent);
            return result;
        });
    };
}

// دالة لتحميل معلومات مستخدم واحد
function loadSingleUser(userId) {
    if (window.firebase && firebase.database) {
        return firebase.database().ref(`users/${userId}`).once('value')
            .then(snapshot => {
                const userData = snapshot.val();
                if (userData && userData.profile) {
                    return {
                        id: userId,
                        ...userData.profile,
                        permissions: userData.permissions || {}
                    };
                }
                return null;
            });
    } else {
        // للعرض التوضيحي
        return Promise.resolve({
            id: userId,
            displayName: 'مستخدم تجريبي',
            email: 'demo@example.com',
            type: 'user',
            permissions: getDefaultPermissions('user')
        });
    }
}

// دالة لتحديث صف واحد في جدول المستخدمين
function updateUserRow(userId) {
    loadSingleUser(userId).then(user => {
        if (!user) return;
        
        // البحث عن الصف
        const row = document.querySelector(`#users-table tr[data-id="${userId}"]`);
        if (!row) return;
        
        // تحديث محتوى الصف
        row.querySelector('td:nth-child(2)').textContent = user.displayName || 'غير محدد';
        row.querySelector('td:nth-child(3)').textContent = user.email;
        
        const typeCell = row.querySelector('td:nth-child(4)');
        typeCell.innerHTML = `<span class="badge ${user.type || 'user'}">${getUserTypeLabel(user.type || 'user')}</span>`;
        
        const statusCell = row.querySelector('td:nth-child(6)');
        statusCell.innerHTML = user.emailVerified ? 
            '<span class="badge success">موثق</span>' : 
            '<span class="badge warning">غير موثق</span>';
    });
}

// دالة مساعدة لتنسيق الرسائل الخطأ
function getErrorMessage(code) {
    const errors = {
        'auth/email-already-in-use': 'البريد الإلكتروني مستخدم بالفعل',
        'auth/invalid-email': 'البريد الإلكتروني غير صالح',
        'auth/weak-password': 'كلمة المرور ضعيفة جداً',
        'auth/user-not-found': 'المستخدم غير موجود',
        'auth/wrong-password': 'كلمة المرور غير صحيحة',
        'auth/too-many-requests': 'تم تجاوز عدد المحاولات المسموح بها، يرجى المحاولة لاحقاً',
        'auth/network-request-failed': 'خطأ في الاتصال بالإنترنت'
    };
    
    return errors[code] || 'حدث خطأ غير متوقع';
}


// تحديث دالة إعداد مراقب التغييرات في الوقت الفعلي
function setupRealtimeUsersListener() {
    if (window.firebase && firebase.database) {
        firebase.database().ref('users').on('child_changed', (snapshot) => {
            const userId = snapshot.key;
            updateUserRow(userId);
        });
        
        firebase.database().ref('users').on('child_removed', (snapshot) => {
            const userId = snapshot.key;
            const row = document.querySelector(`#users-table tr[data-id="${userId}"]`);
            if (row) {
                row.remove();
            }
        });
        
        firebase.database().ref('users').on('child_added', (snapshot) => {
            // تحديث الجدول عند إضافة مستخدم جديد
            loadUsers().then(() => {
                console.log('تم تحديث الجدول بعد إضافة مستخدم جديد');
            }).catch(error => {
                console.error('خطأ في تحديث الجدول:', error);
            });
        });
    }
}

// تحديث دالة تحديث عرض الأزرار حسب الصلاحيات
const originalLoadUsers = loadUsers;
loadUsers = function() {
    return originalLoadUsers().then((result) => {
        updateActionButtonsVisibility();
        return result;
    }).catch(error => {
        console.error('خطأ في تحميل المستخدمين:', error);
        updateActionButtonsVisibility();
        throw error; // إعادة رمي الخطأ للتعامل معه في المستوى الأعلى
    });
};


// تحديث أي أماكن تستدعي loadUsers لاستخدام safeLoadUsers
// مثال:
function refreshUsersList() {
    safeLoadUsers()
        .then(() => {
            console.log('تم تحديث قائمة المستخدمين');
        })
        .catch(error => {
            console.error('خطأ في تحديث القائمة:', error);
        });
}

// إضافة معالجة للأخطاء العامة
window.addEventListener('error', function(event) {
    if (event.error && event.error.message.includes('Cannot read properties of undefined')) {
        console.error('خطأ في قراءة الخصائص:', event.error);
        
        // محاولة التعافي من الخطأ
        if (event.error.stack.includes('loadUsers')) {
            console.log('محاولة إعادة تحميل قائمة المستخدمين...');
            setTimeout(() => {
                safeLoadUsers().catch(err => {
                    console.error('فشل في إعادة تحميل المستخدمين:', err);
                });
            }, 1000);
        }
    }
});



// تحديث الأماكن التي تستدعي loadUsers لاستخدام handlePromiseError
// مثال:
function handleUserManagementAction(action) {
    const loadPromise = loadUsers();
    
    handlePromiseError(loadPromise, (error) => {
        // معالجة الخطأ
        alert('حدث خطأ أثناء تحميل المستخدمين. يرجى المحاولة مرة أخرى.');
    })
    .then(() => {
        // تنفيذ الإجراء بعد تحميل المستخدمين
        action();
    })
    .catch(() => {
        // تجاهل الخطأ لأنه تم معالجته بالفعل
    });
}


// إضافة دالة مساعدة للتحقق من وجود خطأ في Promise
function handlePromiseError(promise, errorHandler) {
    if (!promise || typeof promise.then !== 'function') {
        console.error('الدالة لم تُرجع Promise صالح');
        if (errorHandler) {
            errorHandler(new Error('الدالة لم تُرجع Promise صالح'));
        }
        return Promise.resolve();
    }
    
    return promise.catch(error => {
        console.error('خطأ في Promise:', error);
        if (errorHandler) {
            errorHandler(error);
        }
        throw error;
    });
}

// إضافة معالجة للأخطاء العامة
window.addEventListener('error', function(event) {
    if (event.error && event.error.message.includes('Cannot read properties of undefined')) {
        console.error('خطأ في قراءة الخصائص:', event.error);
        
        // محاولة التعافي من الخطأ
        if (event.error.stack.includes('loadUsers')) {
            console.log('محاولة إعادة تحميل قائمة المستخدمين...');
            setTimeout(() => {
                safeLoadUsers().catch(err => {
                    console.error('فشل في إعادة تحميل المستخدمين:', err);
                });
            }, 1000);
        }
    }
});

// إضافة دالة للتعامل مع Promise بشكل آمن
function safeLoadUsers() {
    const loadPromise = loadUsers();
    
    if (loadPromise && typeof loadPromise.then === 'function') {
        return loadPromise;
    } else {
        // إذا لم تُرجع الدالة Promise، نقوم بتغليفها
        return Promise.resolve();
    }
}

// دالة للتحقق من صلاحية المستخدم الحالي
function hasPermission(permission) {
    let currentUser = null;
    if (window.AuthSystem && typeof window.AuthSystem.getUserInfo === 'function') {
        currentUser = window.AuthSystem.getUserInfo();
    }
    
    return currentUser && currentUser.permissions && currentUser.permissions[permission];
}

// تحديث عرض الأزرار حسب الصلاحيات
function updateActionButtonsVisibility() {
    // إظهار/إخفاء زر إضافة مستخدم
    const addUserBtn = document.getElementById('add-user-btn');
    if (addUserBtn) {
        addUserBtn.style.display = hasPermission('canCreateUsers') ? '' : 'none';
    }
    
    // إظهار/إخفاء أزرار الحذف في الجدول
    const deleteButtons = document.querySelectorAll('.delete-user-btn');
    deleteButtons.forEach(btn => {
        btn.style.display = hasPermission('canDeleteUsers') ? '' : 'none';
    });
}



/**
 * إضافة التحقق من رمز المسؤول لإدارة المستخدمين
 * يجب إضافة هذا الكود إلى ملف user-profile-integration.js
 */

// رمز المسؤول الافتراضي - يمكن تغييره في قاعدة البيانات
const DEFAULT_ADMIN_PIN = '123456';

/**
 * التحقق من رمز المسؤول قبل فتح صفحة إدارة المستخدمين
 */
function verifyAdminPIN() {
    // أولاً، التحقق من أن المستخدم الحالي هو مسؤول
    let currentUser = null;
    if (window.AuthSystem && typeof window.AuthSystem.getUserInfo === 'function') {
        currentUser = window.AuthSystem.getUserInfo();
    }
    
    if (!currentUser || currentUser.type !== 'admin') {
        alert('لا يمكنك الوصول إلى هذه الصفحة. هذه الصفحة متاحة للمسؤولين فقط.');
        return Promise.reject('غير مسموح');
    }
    
    // إنشاء نافذة إدخال رمز المسؤول
    return new Promise((resolve, reject) => {
        showAdminPINModal(resolve, reject);
    });
}

/**
 * إظهار نافذة إدخال رمز المسؤول
 */
function showAdminPINModal(resolve, reject) {
    // التحقق من وجود النافذة
    let pinModal = document.getElementById('admin-pin-modal');
    
    if (!pinModal) {
        // إنشاء النافذة المنبثقة
        pinModal = document.createElement('div');
        pinModal.id = 'admin-pin-modal';
        pinModal.className = 'modal-overlay';
        
        pinModal.innerHTML = `
            <div class="modal admin-pin-modal">
                <div class="modal-header">
                    <h3 class="modal-title">التحقق من رمز المسؤول</h3>
                    <button class="modal-close">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="pin-icon">
                        <i class="fas fa-shield-alt"></i>
                    </div>
                    <p class="pin-message">يرجى إدخال رمز المسؤول للمتابعة إلى صفحة إدارة المستخدمين</p>
                    
                    <div class="pin-input-container">
                        <input type="password" id="admin-pin-input" class="pin-input" maxlength="6" 
                               placeholder="أدخل رمز المسؤول" autocomplete="off">
                        <button type="button" class="toggle-pin-visibility" id="toggle-pin-btn">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                    
                    <div class="pin-error" id="pin-error-message" style="display: none;">
                        رمز المسؤول غير صحيح
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-outline" id="cancel-pin-btn">إلغاء</button>
                    <button class="btn btn-primary" id="verify-pin-btn">تحقق</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(pinModal);
        
        // إضافة الأنماط
        addAdminPINStyles();
        
        // إضافة مستمعي الأحداث
        setupAdminPINListeners(pinModal, resolve, reject);
    }
    
    // إظهار النافذة
    pinModal.classList.add('active');
    
    // التركيز على حقل الإدخال
    document.getElementById('admin-pin-input').focus();
}

/**
 * إضافة مستمعي الأحداث لنافذة رمز المسؤول
 */
function setupAdminPINListeners(modal, resolve, reject) {
    const pinInput = document.getElementById('admin-pin-input');
    const toggleBtn = document.getElementById('toggle-pin-btn');
    const verifyBtn = document.getElementById('verify-pin-btn');
    const cancelBtn = document.getElementById('cancel-pin-btn');
    const closeBtn = modal.querySelector('.modal-close');
    const errorMessage = document.getElementById('pin-error-message');
    
    // زر إظهار/إخفاء الرمز
    toggleBtn.addEventListener('click', function() {
        const type = pinInput.type === 'password' ? 'text' : 'password';
        pinInput.type = type;
        this.querySelector('i').className = type === 'password' ? 'fas fa-eye' : 'fas fa-eye-slash';
    });
    
    // زر التحقق
    verifyBtn.addEventListener('click', function() {
        verifyPIN();
    });
    
    // زر الإلغاء
    cancelBtn.addEventListener('click', function() {
        closePINModal();
        reject('تم الإلغاء');
    });
    
    // زر الإغلاق
    closeBtn.addEventListener('click', function() {
        closePINModal();
        reject('تم الإغلاق');
    });
    
    // التحقق عند الضغط على Enter
    pinInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            verifyPIN();
        }
    });
    
    // إخفاء رسالة الخطأ عند الكتابة
    pinInput.addEventListener('input', function() {
        errorMessage.style.display = 'none';
    });
    
    // دالة التحقق من الرمز
    function verifyPIN() {
        const enteredPIN = pinInput.value.trim();
        
        if (!enteredPIN) {
            showPINError('يرجى إدخال رمز المسؤول');
            return;
        }
        
        // جلب رمز المسؤول من قاعدة البيانات أو استخدام الرمز الافتراضي
        getAdminPIN().then(correctPIN => {
            if (enteredPIN === correctPIN) {
                closePINModal();
                resolve();
            } else {
                showPINError('رمز المسؤول غير صحيح');
            }
        });
    }
    
    // دالة إظهار رسالة الخطأ
    function showPINError(message) {
        errorMessage.textContent = message;
        errorMessage.style.display = 'block';
        pinInput.classList.add('error');
        
        setTimeout(() => {
            pinInput.classList.remove('error');
        }, 500);
    }
}

/**
 * إغلاق نافذة رمز المسؤول
 */
function closePINModal() {
    const pinModal = document.getElementById('admin-pin-modal');
    if (pinModal) {
        pinModal.classList.remove('active');
        
        // مسح الإدخال
        const pinInput = document.getElementById('admin-pin-input');
        if (pinInput) {
            pinInput.value = '';
        }
        
        // إخفاء رسالة الخطأ
        const errorMessage = document.getElementById('pin-error-message');
        if (errorMessage) {
            errorMessage.style.display = 'none';
        }
    }
}

/**
 * جلب رمز المسؤول من قاعدة البيانات
 */
function getAdminPIN() {
    if (window.firebase && firebase.database) {
        return firebase.database().ref('settings/adminPIN').once('value')
            .then(snapshot => {
                return snapshot.val() || DEFAULT_ADMIN_PIN;
            })
            .catch(error => {
                console.error('خطأ في جلب رمز المسؤول:', error);
                return DEFAULT_ADMIN_PIN;
            });
    } else {
        // للعرض التوضيحي
        return Promise.resolve(DEFAULT_ADMIN_PIN);
    }
}

/**
 * تعديل دالة الانتقال إلى صفحة إدارة المستخدمين
 */
const originalNavigateToPage = navigateToPage;
navigateToPage = function(pageName) {
    if (pageName === 'user-management') {
        // التحقق من رمز المسؤول أولاً
        verifyAdminPIN()
            .then(() => {
                // إذا نجح التحقق، انتقل إلى الصفحة
                originalNavigateToPage(pageName);
            })
            .catch(error => {
                // إذا فشل التحقق، لا تفعل شيئاً
                console.log('فشل التحقق من رمز المسؤول:', error);
            });
    } else {
        // للصفحات الأخرى، انتقل بشكل طبيعي
        originalNavigateToPage(pageName);
    }
};

/**
 * إضافة أنماط CSS لنافذة رمز المسؤول
 */
function addAdminPINStyles() {
    const styleElement = document.createElement('style');
    styleElement.textContent = `
        .admin-pin-modal {
            max-width: 400px;
            text-align: center;
        }
        
        .pin-icon {
            font-size: 3rem;
            color: #3b82f6;
            margin: 20px 0;
        }
        
        .pin-message {
            color: #4b5563;
            margin-bottom: 25px;
            font-size: 1rem;
        }
        
        .pin-input-container {
            position: relative;
            margin-bottom: 20px;
        }
        
        .pin-input {
            width: 100%;
            padding: 12px 40px 12px 12px;
            font-size: 1.2rem;
            text-align: center;
            letter-spacing: 5px;
            font-family: monospace;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            transition: border-color 0.3s ease;
        }
        
        .pin-input:focus {
            border-color: #3b82f6;
            outline: none;
        }
        
        .pin-input.error {
            border-color: #ef4444;
            animation: shake 0.5s ease-in-out;
        }
        
        .toggle-pin-visibility {
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: #6b7280;
            cursor: pointer;
            padding: 5px;
        }
        
        .toggle-pin-visibility:hover {
            color: #374151;
        }
        
        .pin-error {
            color: #ef4444;
            font-size: 0.9rem;
            margin-top: 10px;
        }
        
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
            20%, 40%, 60%, 80% { transform: translateX(5px); }
        }
    `;
    
    document.head.appendChild(styleElement);
}

/**
 * إضافة خيار تغيير رمز المسؤول في إعدادات النظام
 */
function addAdminPINSettings() {
    // إضافة قسم في صفحة الإعدادات للمسؤولين فقط
    const settingsPage = document.getElementById('settings-page');
    if (!settingsPage) return;
    
    // التحقق من أن المستخدم الحالي مسؤول
    let currentUser = null;
    if (window.AuthSystem && typeof window.AuthSystem.getUserInfo === 'function') {
        currentUser = window.AuthSystem.getUserInfo();
    }
    
    if (!currentUser || currentUser.type !== 'admin') {
        return;
    }
    
    // إنشاء قسم إعدادات رمز المسؤول
    const adminPINSection = document.createElement('div');
    adminPINSection.className = 'section admin-settings-section';
    adminPINSection.innerHTML = `
        <div class="section-header">
            <h2 class="section-title">إعدادات أمان المسؤول</h2>
        </div>
        <div class="section-content">
            <div class="form-group">
                <label class="form-label">رمز المسؤول الحالي</label>
                <div class="password-input-container">
                    <input type="password" id="current-admin-pin" class="form-input" placeholder="أدخل رمز المسؤول الحالي">
                    <button type="button" class="toggle-password">
                        <i class="fas fa-eye"></i>
                    </button>
                </div>
            </div>
            
            <div class="form-group">
                <label class="form-label">رمز المسؤول الجديد</label>
                <div class="password-input-container">
                    <input type="password" id="new-admin-pin" class="form-input" placeholder="أدخل رمز المسؤول الجديد">
                    <button type="button" class="toggle-password">
                        <i class="fas fa-eye"></i>
                    </button>
                </div>
            </div>
            
            <div class="form-group">
                <label class="form-label">تأكيد رمز المسؤول الجديد</label>
                <div class="password-input-container">
                    <input type="password" id="confirm-admin-pin" class="form-input" placeholder="أعد إدخال رمز المسؤول الجديد">
                    <button type="button" class="toggle-password">
                        <i class="fas fa-eye"></i>
                    </button>
                </div>
            </div>
            
            <div class="form-group">
                <button class="btn btn-primary" id="save-admin-pin-btn">حفظ رمز المسؤول</button>
            </div>
        </div>
    `;
    
    // إضافة قسم إعدادات رمز المسؤول إلى الصفحة
    settingsPage.appendChild(adminPINSection);
    
    // إضافة مستمعي الأحداث
    setupAdminPINSettingsListeners();
}

/**
 * إضافة مستمعي الأحداث لإعدادات رمز المسؤول
 */
function setupAdminPINSettingsListeners() {
    // أزرار إظهار/إخفاء كلمات المرور
    const toggleButtons = document.querySelectorAll('.admin-settings-section .toggle-password');
    toggleButtons.forEach(button => {
        button.addEventListener('click', function() {
            const passwordInput = this.parentElement.querySelector('input');
            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                this.querySelector('i').classList.remove('fa-eye');
                this.querySelector('i').classList.add('fa-eye-slash');
            } else {
                passwordInput.type = 'password';
                this.querySelector('i').classList.remove('fa-eye-slash');
                this.querySelector('i').classList.add('fa-eye');
            }
        });
    });
    
    // زر حفظ رمز المسؤول
    const saveBtn = document.getElementById('save-admin-pin-btn');
    if (saveBtn) {
        saveBtn.addEventListener('click', function() {
            saveAdminPIN();
        });
    }
}

/**
 * حفظ رمز المسؤول الجديد
 */
function saveAdminPIN() {
    const currentPIN = document.getElementById('current-admin-pin').value;
    const newPIN = document.getElementById('new-admin-pin').value;
    const confirmPIN = document.getElementById('confirm-admin-pin').value;
    
    // التحقق من الحقول
    if (!currentPIN || !newPIN || !confirmPIN) {
        alert('يرجى ملء جميع الحقول');
        return;
    }
    
    if (newPIN.length < 4) {
        alert('يجب أن يكون رمز المسؤول 4 أرقام على الأقل');
        return;
    }
    
    if (newPIN !== confirmPIN) {
        alert('رمز المسؤول الجديد وتأكيده غير متطابقين');
        return;
    }
    
    // التحقق من رمز المسؤول الحالي
    getAdminPIN().then(correctPIN => {
        if (currentPIN !== correctPIN) {
            alert('رمز المسؤول الحالي غير صحيح');
            return;
        }
        
        // حفظ رمز المسؤول الجديد
        if (window.firebase && firebase.database) {
            firebase.database().ref('settings/adminPIN').set(newPIN)
                .then(() => {
                    alert('تم تغيير رمز المسؤول بنجاح');
                    
                    // مسح الحقول
                    document.getElementById('current-admin-pin').value = '';
                    document.getElementById('new-admin-pin').value = '';
                    document.getElementById('confirm-admin-pin').value = '';
                })
                .catch(error => {
                    console.error('خطأ في حفظ رمز المسؤول:', error);
                    alert('حدث خطأ أثناء حفظ رمز المسؤول');
                });
        } else {
            // للعرض التوضيحي
            alert('تم تغيير رمز المسؤول بنجاح (عرض توضيحي)');
            
            // مسح الحقول
            document.getElementById('current-admin-pin').value = '';
            document.getElementById('new-admin-pin').value = '';
            document.getElementById('confirm-admin-pin').value = '';
        }
    });
}

// إضافة إعدادات رمز المسؤول عند تحميل الصفحة
document.addEventListener('DOMContentLoaded', function() {
    addAdminPINSettings();
});

// تعديل مستمع الحدث الخاص بقائمة إدارة المستخدمين
const originalSetupUserManagementLinkListener = function() {
    const userManagementItem = document.querySelector('.nav-item.user-management .nav-link');
    if (userManagementItem) {
        userManagementItem.addEventListener('click', function(e) {
            e.preventDefault();
            verifyAdminPIN()
                .then(() => {
                    navigateToPage('user-management');
                })
                .catch(error => {
                    console.log('فشل التحقق:', error);
                });
        });
    }
};

// إضافة مستمع الحدث عند تحميل الصفحة
document.addEventListener('DOMContentLoaded', function() {
    originalSetupUserManagementLinkListener();
});



